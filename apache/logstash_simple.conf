input {

    # Getting Shell Input 
    stdin {
        codec => json
    }

    # Getting HTTP Input
    http {
        host => "127.0.0.1"
        port => 8080
        # type => "access"
    }

    # Getting File Input
    file {
        path => "/etc/logstash/events/apache_*.logs"
        start_position => "beginning"
        # type => "access"
    }

    file {
        path => "/etc/logstash/events/java_error.log"
        start_position => beginning

        # Multiline codec is used to get a multiline error output as single event
        # Negate is used to match the remaining lines in log and skip
        # auto_flush_interval is setting the timeout for waiting for next event
        codec => multiline {
            pattern => "^%{CATALINA_DATESTAMP}"
            negate => true
            what => "previous"
            auto_flush_interval => 5
        }

    }
}

filter {

    # Apache Error Log File Filtering
    if [headers][request_path] =~ "error" {
        mutate {
            replace => { type => "error" }
        }
        grok {
            match => { "message" => "%{CATALINA_DATESTAMP:[@metadata][timestamp]} %{LOGLEVEL:level} %{JAVACLASS:class}: (?<msg>.+?(?=(\r\n|\r|\n)))" }
        }
        date {
            match => { "[@metadata][timestamp]", "MMM dd, yyyy HH:mm:ss a"  }
        }
    }

    # Apache Access Log file Filtering
    else {
        mutate {
            replace => { type => "access" }
        }
        grok {
            # HTTPD_COMBINEDLOG
            match => { "message" => '%{HTTPD_COMMONLOG} "%{GREEDYDATA:referrer} %{GREEDYDATA:agent}"' }
        }
        if "_grokparsefailure" in [tags] {
            drop {} # Drops the event
        }

        #Getting Agent field from Grok and filtering useragent section with plugin
        useragent {
            source => "agent"
            target => "ua"
        }

        # Skipping Static files
        if [request] =~ /^\/js\//
            or [request] =~ /^\/css\// 
            or [request] in [ "/robots.txt", "/fav.icon" ] {
                drop {}
            }

        mutate {
            convert => { 
                "response" => "integer"
                "bytes" => "integer"
            },
            remove_field => [ "host", "@version" ]
        }    
        date {
            match => [ "timestamp" : "dd/MMM/yyyy:HH:mm:ss Z"]
            remove_field => [ "timestamp" ]
        }
        if "_dateparsefailure" in [tags] {
            drop {} # Drops the event
        }
        geoip {
            source => "clientip"
            fields => [ "timezone", "country_code2*", "latitude", "longitude", "country_name", "location"] 
        }
        if "_geoip_lookup_failure" in [tags] {
            drop {} # Drops the event
        }
    }
}

output {

    if [type] == "access" {
        elasticsearch {
            hosts => [ "127.0.0.1:9200"]
            http_compression => true
            #index => "%{type}-%{+yyyy.MM.dd}"
        }
    }
    else {
        # Shell Output
        stdout {
            codec => rubydebug
            metadata => true
        }
    
        # File Output
        file {
            path => "%{type}_%{+yyyy_MM_dd}.log"
        }
    }
}